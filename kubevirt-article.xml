<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook"
     xmlns:xi="http://www.w3.org/2001/XInclude"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version="5.0" xml:id="cha-virtualization-kubevirt">
 <title>KubeVirt</title>
  <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
  <abstract>
   <para>
    KubeVirt is a virtual machine management add-on for Kubernetes. KubeVirt extends Kubernetes by adding additional virtualization resource types through Kubernetes' Custom Resource Definitions (CRD) API. Along with the Custom Resources, KubeVirt includes controllers and agents that provide virtual machine management capabilities on the cluster. By using this mechanism, the Kubernetes API can be used to manage virtual machine resources similar to other Kubernetes resources.
   </para>
  </abstract>
  </info>

  <sect1 xml:id="virtualization-kubevirt">
   <title>KubeVirt Components</title>
   <para>
    KubeVirt consists of two RPM-based packages, and five container images that provide the Kubernetes virtual machine management extension. The RPM packages include <package>kubevirt-virtctl</package> and <package>kubevirt-manifests</package>. The container images include <package>virt-api</package>, <package>virt-controller</package>, <package>virt-handler</package>, <package>virt-launcher</package>, and <package>virt-operator</package>.
   </para>
   <para>
    <package>kubevirt-virtctl</package> can be installed on any machine with administrator access to the cluster. It contains the virtctl tool, which provides syntactic sugar on top of the kubectl tool for virtual machine resources. Although the kubectl tool can be used to manage virtual machines, it is a bit awkward since unlike standard Kubernetes resources, virtual machines maintain state. Migration is also unique to virtual machines. If a standard Kubernetes resource needs to be evacuated from a cluster node, it is destroyed and started again on an alternate node. Since virtual machines are stateful they cannot be destroyed and must be live-migrated away if a node is under evacuation. The virtctl tool abstracts the complexity of managing virtual machines with kubectl. It can be used to stop, start, pause, unpause, and migrate virtual machines. virtclt also provides access to the virtual machine's serial console and graphics server.
   </para>
   <para>
    <package>kubevirt-manifests</package> contains the manifests, or recipes, for installing KubeVirt. The most interesting files are <filename>/usr/share/kube-virt/manifests/release/kubevirt-cr.yaml</filename> and <filename>/usr/share/kube-virt/manifests/release/kubevirt-operator.yaml</filename>. <filename>kubevirt-cr.yaml</filename> contains the KubeVirt Custom Resource definition that represents the KubeVirt service. <filename>kubevirt-operator.yaml</filename> is the recipe for deploying the KubeVirt operator, which deploys the KubeVirt service to the cluster and manages its' lifecycle.
   </para>
   <para>
    <package>virt-api</package> is a cluster component that provides the Kubernetes API extension for virtual machine resources. Like <package>virt-api</package>, <package>virt-controller</package> is a cluster component that watches for new objects created via <package>virt-api</package>, or updates to existing objects, and takes action to ensure the object state matches the requested state. <package>virt-handler</package> is a DaemonSet and a node component that has the job of keeping the cluster-level virtual machine object in sync with the libvirtd domain running in <package>virt-launcher</package>. <package>virt-handler</package> can also perform node-centric operations like configuring networking and/or storage on the node as per the virtual machine specification. <package>virt-launcher</package> is also a node component and has the job of running libvirt+qemu to provide the virtual machine environment. <package>virt-launcher</package> is just a lowly pod resource.
   </para>
   <para>
    <package>virt-operator</package> implements the Kubernetes operator pattern. Operators encode the human knowledge required to deploy, run, and maintain an application. Operators are a Kubernetes Deployment resource type and are often used to manage the custom resources and custom controllers that together provide a more complex Kubernetes application such as KubeVirt.
   </para>
  </sect1>
  <sect1 xml:id="virtualization-kubevirt-installation">
   <title>Installing KubeVirt on Kubernetes</title>
   <para>
    KubeVirt can be installed on a Kubernetes cluster by installing the <package>kubevirt-manifests</package> package on an admin node, applying the <package>virt-operator</package> manifest, applying a Pod Security Policy (PSP) granting <package>virt-operator</package> elevated permissions, and finally creating the KubeVirt custom resource. For example, on a cluster admin node execute the following:
   </para>
<screen>&prompt.sudo;zypper install kubevirt-manifests
&prompt.sudo;kubectl apply -f /usr/share/kube-virt/manifests/release/kubevirt-operator.yaml
&prompt.sudo;kubectl -n kubevirt create rolebinding kubvirt-privileged-rolebinding --clusterrole=suse:caasp:psp:privileged --group=system:serviceaccounts:kubevirt
&prompt.sudo;kubectl apply -f /usr/share/kube-virt/manifests/release/kubevirt-cr.yaml</screen>
   <para>
    Note the example uses the CaaSP privileged PSP to give <package>virt-operator</package> sufficient permissions to deploy the other components. It would need adjusted for a non-CaaSP based Kubernetes cluster.
   </para>
   <para>
    After creating the KubeVirt custom resource, <package>virt-operator</package> will deploy the remaining KubeVirt components. Progress can be monitored by viewing the status of the resources in the kubevirt namespace
   </para>
<screen>&prompt.sudo;kubectl get all -n kubevirt</screen>
   <para>
     The cluster is ready to deploy virtual machines once <package>virt-api</package>, <package>virt-controller</package>, and <package>virt-handler</package> are READY with STATUS 'Running'.
   </para>
   <para>
     Prior to deploying virtual machines to the cluster, <package>virt-controller</package> and <package>virt-handler</package> must be given elevated cluster permissions. These components perform cluster operations necessary for virtual machine management, such as pod creation and configuration, network and storage setup, etc. Without elevated privileges, <package>virt-controller</package> and <package>virt-handler</package> will not have access to these operations and virtual machines will fail to deploy.
   </para>
   <para>
     For CaaSP-based Kubernetes clusters, <package>kubevirt-manifests</package> provides a PSP that uses the CaaSP privileged PSP. Installing the PSP will give <package>virt-controller</package> and <package>virt-handler</package> the required permissions
   </para>
<screen>&prompt.sudo;kubectl apply -f /usr/share/kube-virt/manifests/release/kubevirt-psp-caasp.yaml</screen>
   <para>
     Some KubeVirt functionality is disabled by default and must be enabled via feature gates. For example live migration and the use of HostDisk for virtual machine disk images are disabled. Enabling KubeVirt feature gates can be done by editing or creating a kubevirt-config configmap resource and specifying the list of features to enable. For example to enable live migration and the use of HostDisks
   </para>
<screen>&prompt.sudo;kubectl create configmap kubevirt-config -n kubevirt --from-literal feature-gates=HostDisk,LiveMigration</screen>
  </sect1>

  <sect1 xml:id="virtualization-kubevirt-running-vm">
   <title>Running Virtual Machines</title>
   <para>
    Two of the most interesting custom resources provided by KubeVirt are VirtualMachine and VirtualMachineInstance. As the names imply, a VMI is a running instance of a VM. The lifeclycle of a VMI can be managed independently from a VM, but long-lived, stateful virtual machines are managed as a VM. The VM is deployed to the cluster in a shutoff state, then activated by changing the desired state to running. Changing a VM resource state can be done with the standard Kubernetes client tool <command>kubectl</command> or with the KubeVirt provided client <command>virtctl</command>.
   </para>
   <para>
    The VM and VMI custom resources make up part of the KubeVirt API. To create a virtual machine, a VM or VMI manifest must be created that adheres to the API. The API supports setting a wide variety of the common virtual machine attributes, e.g. model of vCPU, number of vCPUs, amount of memory, disks, network ports, etc. Below is a simple example of a VMI manifest for a virtual machine with one Nehalem CPU, 2G of memory, one disk, and one network interface
   </para>
   <screen>apiVersion: kubevirt.io/v1alpha3
kind: VirtualMachineInstance
metadata:
  labels:
    special: vmi-host-disk
  name: sles15sp2
spec:
  domain:
    cpu:
      model: Nehalem-IBRS
    devices:
      disks:
      - disk:
          bus: virtio
        name: host-disk
      interfaces:
        - name: green
          masquerade: {}
          ports:
            - port: 80
    machine:
      type: ""
    resources:
      requests:
        memory: 2048M
  terminationGracePeriodSeconds: 0
  networks:
  - name: green
    pod: {}
  volumes:
  - hostDisk:
      path: /hostDisks/sles15sp2/disk.raw
      type: Disk
      shared: true
    name: host-disk
status: {}</screen>
   <para>
    Applying this VMI manifest to the cluster will create a virt-launcher container running libvirt and qemu, providing the familiar KVM virtual machine environment.
   </para>
<screen>&prompt.sudo;kubectl apply -f sles15sp2vmi.yaml
&prompt.sudo;kubectl get vmis</screen>
   <para>
    Similar to other Kubernetes resources, VMs and VMIs can be managed with the <command>kubectl</command> client tool. Any <command>kubectl</command> operation that works with resource types will work with the KubeVirt custom resources, e.g. describe, delete, get, log, patch, etc. VM resources are a bit more awkward to manage with <command>kubectl</command>. Since a VM resource can be in a shutoff state, turning it on requires patching the manifest to change the desired state to running. For example
   </para>
<screen>&prompt.sudo;kubectl patch vm sles15sp2 --type merge -p '{"spec":{"running":true}}'</screen>
   <para>
    The <command>virtctl</command> tool included in the <package>kubevirt-virtclt</package> package provides syntactic sugar on top of <command>kubectl</command> for VM and VMI resources, allowing them to be stopped, started, paused, unpaused, and migrated. <command>virtctl</command> also provides access to the virtual machine's serial console and graphics server. For example
   </para>
<screen>&prompt.sudo;virtctl start VM
&prompt.sudo;virtctl console VMI
&prompt.sudo;virtctl stop VM
&prompt.sudo;virtctl pause VM|VMI
&prompt.sudo;virtctl unpause VM|VMI
&prompt.sudo;virtctl vnc VMI
&prompt.sudo;virtctl migrate VM</screen>
  </sect1>

  <sect1 xml:id="virtualization-kubevirt-debug">
   <title>Debugging</title>
   <para>
    KubeVirt is Technical Preview and needs more deployment experience and testing before it becomes fully supported. If issues are encountered the following debug resources are available to help identify the problem.
   </para>
   <para>
    The status of all KubeVirt resources can be examined with the <command>kubectl get</command> command.
   </para>
<screen>&prompt.sudo;kubectl get all -n kubevirt</screen>
   <para>
    Resources with failed status can be further queried by examining their definition and expanded status information.
   </para>
<screen>&prompt.sudo;kubectl describe deployment virt-operator
&prompt.sudo;kubectl get deployment virt-operator -o yaml -n kubevirt
&prompt.sudo;kubectl describe pod virt-handler-xbjkg -n kubevirt
&prompt.sudo;kubectl get pod virt-handler-xbjkg -o yaml -n kubevirt</screen>
   <para>
    Logs from the problematic KubeVirt pod can contain a wealth of information since stderr and service logging from within the pod is generally available via the Kubernetes log service:
   </para>
<screen>&prompt.sudo;kubectl logs virt-operator-558c57bc4-mg68w -n kubevirt
&prompt.sudo;kubectl logs virt-handler-xbjkg -n kubevirt</screen>
   <para>
    If the underlying pod is running but there are problems with the service running in it, a shell can be accessed to inspect the pod environment and poke at its service:
   </para>
<screen>&prompt.sudo;kubectl -n kubevirt exec -it virt-handler-xbjkg -- /bin/bash</screen>
  </sect1>
 </chapter>
